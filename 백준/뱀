package practice;

import java.util.Scanner;

/*
<풀이 방법>

빈 칸 = 0
뱀이 있는 칸 = 1~n
사과가 있는 칸 = -1
뱀 길이 = 1 (초기값)
뱀의 방향 = 오른쪽:0, 아래:1, 왼쪽:2, 위:3

1. n*n 배열 초기화 후 사과 입력하기
2. 뱀의 이동위치가 n보다 작고 0보다 크거나 같고, 값이 0보다 작거나 같은 동안 반복
3. 시간 증가(게임이 중단되어도 시간 흘러간 것으로 판단)
4. 바뀐 row, col값에 따라 게임오버 판단
5. 사과O -> 뱀 길이 증가, 보드에 뱀 정보 업데이트
6. 사과X -> 뱀 길이 그대로, 꼬리 제거 후 머리 정보 넣기
꼬리 제거 방법 : 보드에 뱀이 있는 곳은 1~n, 마지막을 없애기 위해 배열 모두 돌며 0보다 큰 값을 가지는 인덱스 값--, 
현재 위치에 현재 뱀 길이 넣음 (1인 곳이 0이 되었으니 머리를 추가시키면 길이 유지하면서 전진한 것으로 됨)
7. (방향 바꿀 시간이 끝난 뒤 회전) 뱀의 방향 변경 체크, 뱀의 방향에 따라 row, col값 변경
*/

class Test
{
	public static void main(String args[]) throws Exception
	{
		Scanner sc = new Scanner(System.in);
		
		//보드 초기화
		int boardSize = sc.nextInt();
		int[][] board = new int[boardSize][boardSize];
		for(int col = 0; col < boardSize; col++)
			for(int row = 0; row < boardSize; row++)
				board[col][row] = 0;
		
		//뱀 위치 지정
		int snakeLen = 1; //게임 시작 시 뱀의 길이 = 1
		board[0][0] = snakeLen;
		
		//사과의 좌표 정보 저장
		int appleCnt = sc.nextInt();
		int[][] applePlace = new int[appleCnt][2];
		for(int col = 0; col < appleCnt; col++)
			for(int row = 0; row < 2; row++)
				applePlace[col][row] = sc.nextInt();

		//보드에 사과 위치 표시
		for(int col = 0; col < appleCnt; col++)
			for(int row = 0; row < 2; row++)
				board[applePlace[col][0]][applePlace[col][1]] = -1;
		
		//뱀의 방향 변환 정보 저장
		int snakeChangeCnt = sc.nextInt();
		int[] snakeChangeTime = new int[snakeChangeCnt];
		String[] snakeChangeDir = new String[snakeChangeCnt];
		for(int col = 0; col < snakeChangeCnt; col++) {
			snakeChangeTime[col] = sc.nextInt();
			snakeChangeDir[col] = sc.next();
		}
		
		int row = 0;
		int col = 0;
		int time = 0;
		snakeChangeCnt = 0; //뱀 방향 변환 몇번 했는지
		int snakeDir = 0; //뱀의 방향 -> 오른쪽:0, 아래:1, 왼쪽:2, 위:3
		//String[] snakeDirArr = {"right", "down", "left", "up"}; //배열에 방향 넣고 전환마다 변경
		while(true) {
			time++;
			
			//해당 방향으로 전진
			if(snakeDir == 0)
				row++;
			else if(snakeDir == 1)
				col++;
			else if(snakeDir == 2)
				row--;
			else if(snakeDir == 3)
				col--;
			
			//부딪힌다 = 현재 바라보는 방향에 벽 or 뱀이 있는가? (뚫어야 부딪히는게 아님)
			//벽이나 뱀에 부딪히면 게임 오버
			//바라보는 방향으로의 인덱스 값 변경 후 배열 값이 0보다 크면 뱀에 부딪힌 것, 인덱스 범위를 벗어나면 벽에 부딪힌 것
//			if(snakeDir == 0) {
//				if(row + 1 >= boardSize)
//					break;
//				else if(board[col][row + 1] > 0)
//					break;
//			}
//			else if(snakeDir == 1) {
//				if(col + 1 >= boardSize)
//					break;
//				else if(board[col + 1][row] > 0)
//					break;
//			}
//			else if(snakeDir == 2) {
//				if(row - 1 < 0)
//					break;
//				else if(board[col][row - 1] > 0)
//					break;
//			}
//			else if(snakeDir == 3) {
//				if(col - 1 < 0)
//					break;
//				else if(board[col - 1][row] > 0)
//					break;
//			}
//			
			
			//벽에 부딪히면 게임 오버
			if(row < 0 || col < 0 || row >= boardSize || col >= boardSize)
				break;
			
			//뱀의 몸에 부딪히면 게임 오버
			if(board[col][row] > 0)
				break;
			
			//사과 있는 경우 : 뱀 길이 증가
			if(board[col][row] == -1) {
				snakeLen++;
				board[col][row] = snakeLen;
			}
			//사과가 없는 경우 : 뱀 길이는 그대로, 전진
			else {
				int snakeDec = 0;
				for(int checkRow = 0; checkRow < boardSize; checkRow++) {
					for(int checkCol = 0; checkCol < boardSize; checkCol++) {
						if(board[checkRow][checkCol] > 0) {
							board[checkRow][checkCol]--;
							snakeDec++;
						}
						if(snakeLen == snakeDec)
							break;
					}
					if(snakeLen == snakeDec)
						break;
				}
				board[col][row] = snakeLen;
			}
			
			//방향 변경 체크 (게임 시작 시간으로부터 X초가 끝난 뒤)
			if(time == snakeChangeTime[snakeChangeCnt]) {
				if(snakeChangeDir[snakeChangeCnt].equals("D"))
					snakeDir = snakeDir == 3 ? 0 : snakeDir + 1;
				else if(snakeChangeDir[snakeChangeCnt].equals("L"))
					snakeDir = snakeDir == 0 ? 3 : snakeDir - 1;
				snakeChangeCnt = snakeChangeCnt < snakeChangeDir.length - 1 ? snakeChangeCnt + 1 : snakeChangeCnt;
				//snakeChangeTime을 다 확인해도 계속 time과 비교하므로 snakeChangeCnt가 배열의 크기를 넘지 않도록 설정
			}
		}
		System.out.println(time);
		sc.close();
	}
}
